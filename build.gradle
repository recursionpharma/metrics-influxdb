plugins {
	id "java"
	id "maven-publish"
	id "nebula.provided-base" version "2.2.2"
}

group = "com.recursionpharma"
def description = "A reporter for metrics 2 which announces measurements to an InfluxDB server. Forked from davidB/metrics-influxdb and ported to metrics 2"
version = "git describe --always --dirty".execute().text.trim()
println("version : '${version}'")

repositories {
	jcenter()
}

dependencies {
	provided 'com.yammer.metrics:metrics-core:2.2.0'
	compile 'org.slf4j:slf4j-api:1.7.7'

	testCompile 'junit:junit:4.4'
	testCompile 'org.testng:testng:6.9.10'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.easytesting:fest-assert-core:2.0M10'
	testCompile 'org.mockito:mockito-all:1.9.5'
	testCompile 'org.slf4j:slf4j-simple:1.7.7'
	testCompile 'com.google.guava:guava:19.0'
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
test {
	// enable TestNG support (default is JUnit)
	useTestNG()
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
	from javadoc.destinationDir
	classifier = 'javadoc'
}

// add javadoc/source jar tasks as artifacts
artifacts {
	archives sourcesJar, javadocJar
}

def pomConfig = {
	name "metrics2-influxdb"
	url "https://github.com/recursionpharma/metrics-influxdb"
	inceptionYear "2017"
	licenses {
		license {
			name "Public domain (CC0-1.0)"
			url "http://creativecommons.org/publicdomain/zero/1.0/"
			distribution "repo"
		}
	}
	scm {
		connection "scm:git:git://github.com/recursionpharma/metrics-influxdb.git"
		developerConnection "scm:git:git@github.com:recursionpharma/metrics-influxdb.git"
		url "https://github.com/recursionpharma/metrics-influxdb/"
	}
	developers {
		developer {
			id "scizo"
			name "Scott Nielsen"
		}
	}
}

publishing {
	publications {
		mavenStuff(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			pom.withXml {
				def root = asNode()
				root.appendNode('description', description)
				root.children().last() + pomConfig
			}
		}
	}
}
